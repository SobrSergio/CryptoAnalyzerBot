import pandas as pd
import talib
import numpy as np
from datetime import datetime
import ccxt
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import VotingRegressor
import os
import matplotlib.pyplot as plt
import mplfinance as mpf



pattern_codes = {
    "CDL2CROWS": "–î–≤–∞ –≤–æ—Ä–æ–Ω–∞",
    "CDL3BLACKCROWS": "–¢—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞",
    "CDL3INSIDE": "–¢—Ä–∏ –≤–Ω—É—Ç—Ä–∏ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑",
    "CDL3LINESTRIKE": "–¢—Ä–µ—Ö–ª–∏–Ω–µ–π–Ω—ã–π —É–¥–∞—Ä",
    "CDL3OUTSIDE": "–¢—Ä–∏ —Å–Ω–∞—Ä—É–∂–∏ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑",
    "CDL3STARSINSOUTH": "–¢—Ä–∏ –∑–≤–µ–∑–¥—ã –Ω–∞ —é–≥–µ",
    "CDL3WHITESOLDIERS": "–¢—Ä–∏ –ø—Ä–æ–¥–≤–∏–≥–∞—é—â–∏—Ö—Å—è –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞",
    "CDLABANDONEDBABY": "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫",
    "CDLADVANCEBLOCK": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–ª–æ–∫",
    "CDLBELTHOLD": "–ü–æ—è—Å–Ω–æ–π –∑–∞—Ö–≤–∞—Ç",
    "CDLBREAKAWAY": "–ü–µ—Ä–µ—Ä—ã–≤",
    "CDLCLOSINGMARUBOZU": "–ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è –º–∞—Ä—É–±–æ–∑—É",
    "CDLCONCEALBABYSWALL": "–°–∫—Ä—ã—Ç—å —Å—Ç–µ–Ω—É —Ä–µ–±–µ–Ω–∫–∞",
    "CDLCOUNTERATTACK": "–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞",
    "CDLDARKCLOUDCOVER": "–¢–µ–º–Ω–æ–µ –æ–±–ª–∞—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ",
    "CDLDOJI": "–î–æ–¥–∂–∏",
    "CDLDOJISTAR": "–î–æ–¥–∂–∏-–∑–≤–µ–∑–¥–∞",
    "CDLDRAGONFLYDOJI": "–î–æ–¥–∂–∏-—Å—Ç—Ä–µ–∫–æ–∑–∞",
    "CDLENGULFING": "–ü–æ–≥–ª–æ—â–µ–Ω–∏–µ",
    "CDLEVENINGDOJISTAR": "–í–µ—á–µ—Ä–Ω—è—è –∑–≤–µ–∑–¥–∞ –¥–æ–¥–∂–∏",
    "CDLEVENINGSTAR": "–í–µ—á–µ—Ä–Ω—è—è –∑–≤–µ–∑–¥–∞",
    "CDLGAPSIDESIDEWHITE": "–ü—Ä–æ–±–µ–ª –≤ —Å—Ç–æ—Ä–æ–Ω—É –±–µ–ª–æ–≥–æ",
    "CDLGRAVESTONEDOJI": "–ú–æ–≥–∏–ª—å–Ω—ã–π –¥–æ–¥–∂–∏",
    "CDLHAMMER": "–ú–æ–ª–æ—Ç",
    "CDLHANGINGMAN": "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫",
    "CDLHARAMI": "–•–∞—Ä–∞–º–∏",
    "CDLHARAMICROSS": "–•–∞—Ä–∞–º–∏-–∫—Ä–µ—Å—Ç",
    "CDLHIGHWAVE": "–í—ã—Å–æ–∫–∞—è –≤–æ–ª–Ω–∞",
    "CDLHIKKAKE": "–•–∏–∫–∫–∞–∫–µ",
    "CDLHIKKAKEMOD": "–•–∏–∫–∫–∞–∫–µ –º–æ–¥",
    "CDLHOMINGPIGEON": "–î–æ–º–æ–≤–æ–π –≥–æ–ª—É–±—å",
    "CDLIDENTICAL3CROWS": "–¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤–æ—Ä–æ–Ω–∞",
    "CDLINNECK": "–ù–∞ —à–µ–µ",
    "CDLINVERTEDHAMMER": "–û–±—Ä–∞—Ç–Ω—ã–π –º–æ–ª–æ—Ç",
    "CDLKICKING": "–£–¥–∞—Ä",
    "CDLKICKINGBYLENGTH": "–£–¥–∞—Ä –ø–æ –¥–ª–∏–Ω–µ",
    "CDLLADDERBOTTOM": "–õ–µ—Å—Ç–Ω–∏—á–Ω–æ–µ –¥–Ω–æ",
    "CDLLONGLEGGEDDOJI": "–î–ª–∏–Ω–Ω–æ–Ω–æ–≥–∏–π –¥–æ–¥–∂–∏",
    "CDLLONGLINE": "–î–ª–∏–Ω–Ω–∞—è –ª–∏–Ω–∏—è",
    "CDLMARUBOZU": "–ú–∞—Ä—É–±–æ–∑—É",
    "CDLMATCHINGLOW": "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∏–Ω–∏–º—É–º",
    "CDLMATHOLD": "–ú–∞—Ç —Ö–æ–ª–¥",
    "CDLMORNINGDOJISTAR": "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–≤–µ–∑–¥–∞ –¥–æ–¥–∂–∏",
    "CDLMORNINGSTAR": "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–≤–µ–∑–¥–∞",
    "CDLONNECK": "–û–¥–∏–Ω –Ω–∞ —à–µ–µ",
    "CDLPIERCING": "–ü—Ä–æ–Ω–∑–∏—Ç–µ–ª—å–Ω—ã–π",
    "CDLRICKSHAWMAN": "–†–∏–∫—à–∞-—á–µ–ª–æ–≤–µ–∫",
    "CDLRISEFALL3METHODS": "–ú–µ—Ç–æ–¥—ã –ø–æ–¥—ä–µ–º–∞/–ø–∞–¥–µ–Ω–∏—è",
    "CDLSEPARATINGLINES": "–†–∞–∑–¥–µ–ª—è—é—â–∏–µ –ª–∏–Ω–∏–∏",
    "CDLSHOOTINGSTAR": "–ü–∞–¥–∞—é—â–∞—è –∑–≤–µ–∑–¥–∞",
    "CDLSHORTLINE": "–ö–æ—Ä–æ—Ç–∫–∞—è –ª–∏–Ω–∏—è",
    "CDLSPINNINGTOP": "–í–µ—Ä—Ç—è—â–∏–π—Å—è –≤–µ—Ä—Ö",
    "CDLSTALLEDPATTERN": "–ó–∞—Å—Ç—Ä—è–≤—à–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω",
    "CDLSTICKSANDWICH": "–ü–∞–ª–æ—á–∫–∏ –∏ –±—É—Ç–µ—Ä–±—Ä–æ–¥",
    "CDLTAKURI": "–¢–∞–∫—É—Ä–∏",
    "CDLTASUKIGAP": "–ì—ç–ø –¢–∞—Å—É–∫–∏",
    "CDLTHRUSTING": "–¢–æ–ª–∫–∞—é—â–∏–π",
    "CDLTRISTAR": "–¢—Ä–∏ –∑–≤–µ–∑–¥—ã",
    "CDLUNIQUE3RIVER": "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ç—Ä–æ–π–Ω–∞—è —Ä–µ–∫–∞",
    "CDLUPSIDEGAP2CROWS": "–ü—Ä–æ–±–µ–ª –≤–≤–µ—Ä—Ö —É –¥–≤—É—Ö –≤–æ—Ä–æ–Ω",
    "CDLXSIDEGAP3METHODS": "–ü—Ä–æ–±–µ–ª –ø–æ –±–æ–∫–∞–º –æ—Ç —Ç—Ä–µ—Ö –º–µ—Ç–æ–¥–æ–≤",
}





def fetch_cryptocurrency_data(crypto, interval):
    exchange = ccxt.binance()
    data = exchange.fetch_ohlcv(crypto, timeframe=interval, limit=100)
    
    ohlcv_data = {
        'timestamp': [datetime.fromtimestamp(candle[0] / 1000) for candle in data],
        'open': [candle[1] for candle in data],
        'high': [candle[2] for candle in data],
        'low': [candle[3] for candle in data],
        'close': [candle[4] for candle in data],
        'volume': [candle[5] for candle in data]
    }
    
    return ohlcv_data


def find_chart_patterns(crypto, interval):
    data = fetch_cryptocurrency_data(crypto, interval)
    ohlc_data = np.array([data['open'], data['high'], data['low'], data['close']]).T
    patterns = talib.get_function_groups()['Pattern Recognition']
    found_patterns = []
    
    for pattern in patterns:
        try:
            result = getattr(talib, pattern)(*ohlc_data.T)
            if result[-1] != 0:
                found_patterns.append(pattern)
        except TypeError as e:
            if "positional arguments (3 given)" in str(e):
                result = getattr(talib, pattern)(*ohlc_data.T[:-1]) 
                if result[-1] != 0:
                    found_patterns.append(pattern)
    
    found_patterns_names = [pattern_codes.get(pattern, pattern) for pattern in found_patterns]
    
    if found_patterns_names:
        return f"–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ {interval} –¥–ª—è {crypto}: {', '.join(found_patterns_names)}"
    else:
        return f"–ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ {interval} –¥–ª—è {crypto} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã"


def support_resistance_zones(crypto, interval):
    data = fetch_cryptocurrency_data(crypto, interval)
    low_prices = np.array(data['low'])
    high_prices = np.array(data['high'])
    support_level = talib.MIN(low_prices, timeperiod=30)[-1]
    resistance_level = talib.MAX(high_prices, timeperiod=30)[-1]
    return f"–ó–æ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: ${support_level:.2f} - ${support_level + 200:.2f}, –ó–æ–Ω–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: ${resistance_level:.2f} - ${resistance_level + 200:.2f}", support_level, resistance_level


def price_forecast(crypto, interval):
    data = fetch_cryptocurrency_data(crypto, interval)
    
    X = np.arange(len(data['close'])).reshape(-1, 1)
    y = data['close']
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    model1 = GradientBoostingRegressor(n_estimators=200, random_state=42)
    model2 = RandomForestRegressor(n_estimators=200, random_state=42)
    model3 = LinearRegression()
    
    ensemble_model = VotingRegressor([('gb', model1), ('rf', model2), ('lr', model3)])
    
    ensemble_model.fit(X_train, y_train)
    
    y_pred = ensemble_model.predict(X_test)
    
    mse = mean_squared_error(y_test, y_pred)
    
    next_period = np.array([len(data['close'])]).reshape(-1, 1)
    next_price = ensemble_model.predict(next_period)
    # –°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞: {mse:.2f}
    return f"–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {crypto} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥: ${next_price[0]:.2f}"


def fetch_current_price(crypto):
    try:
        exchange = ccxt.binance()
        ticker = exchange.fetch_ticker(crypto)
        current_price = ticker['last']
        return current_price
    except ccxt.NetworkError as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {str(e)}"
    except ccxt.ExchangeError as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {str(e)}"
    except Exception as e:
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"


def generate_analysis_report(crypto, interval):
    try:
        current_price = fetch_current_price(crypto)
        if isinstance(current_price, str):
            return "–û—à–∏–±–∫–∞ –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", [], None, None
        
        patterns_message = find_chart_patterns(crypto, interval)
        support_resistance_message, support_level, resistance_level = support_resistance_zones(crypto, interval)
        forecast_message = price_forecast(crypto, interval)
        
        report = f"üìà –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {crypto} –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {interval}:\n\n"
        
        report += f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {crypto}: ${current_price:.2f}\n\n"
        report += "üîç –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:\n"
        report += patterns_message + "\n\n"
        report += "üí™ –ó–æ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è:\n"
        report += support_resistance_message + "\n\n"
        report += "üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥:\n"
        report += forecast_message
        if current_price < float(forecast_message.split(":")[1].split("$")[1].split(",")[0]):
            report += "üí∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–∫—É–ø–∞—Ç—å"
        else:
            report += "üí∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–¥–∞–≤–∞—Ç—å"



        return report, support_level, resistance_level
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"


def generate_chart(crypto, interval, ohlcv_data, support_level, resistance_level):
    df = pd.DataFrame(ohlcv_data)
    df.columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df.set_index('timestamp', inplace=True)
            
    fig, ax = plt.subplots(2, 1, figsize=(12, 8), sharex=True, gridspec_kw={'height_ratios': [2, 1]})

    mpf.plot(df, type='candle', ax=ax[0], style='charles', volume=ax[1])

    ax[0].axhline(y=support_level, color='blue', linestyle='--', linewidth=1)
    ax[0].axhline(y=resistance_level, color='red', linestyle='--', linewidth=1)

    ax[0].set_title(f'{crypto} {interval} Chart')
    ax[0].set_ylabel('Price')
    ax[1].set_ylabel('Volume')

    chart_dir = os.path.join(os.getcwd(), "charts")
    os.makedirs(chart_dir, exist_ok=True)
    chart_path = os.path.join(chart_dir, f"{crypto.replace('/', '_')}_{interval}.png")
    plt.savefig(chart_path)
    plt.close(fig) 

    return chart_path

