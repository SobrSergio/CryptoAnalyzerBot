import os
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import types

from data.analysis import fetch_cryptocurrency_data, generate_analysis_report, generate_chart
from aiogram import F
from binance.client import Client


binance_client = Client()
valid_intervals = ["1m", "5m", "15m", "30m", "1h", "4h", "1d", "1w", "1M"]

def get_popular_pairs():
    tickers = binance_client.get_ticker()
    tickers_sorted = sorted(tickers, key=lambda x: float(x['quoteVolume']), reverse=True)
    popular_pairs = [ticker['symbol'] for ticker in tickers_sorted if ticker['symbol'].endswith('USDT')][:6]
    popular_pairs_with_slash = [f"{pair[:-4]}/{pair[-4:]}" for pair in popular_pairs]
    return popular_pairs_with_slash

router = Router()

class Reg(StatesGroup):
    crypto = State()
    interval = State()
    visualization = State()

@router.message(F.text == "üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
async def analyze_command(message: Message, state: FSMContext):
    await message.delete()
    await state.set_state(Reg.crypto)
    
    popular_pairs = get_popular_pairs()
    kb = [
        [types.KeyboardButton(text=pair) for pair in popular_pairs[:3]],
        [types.KeyboardButton(text=pair) for pair in popular_pairs[3:]]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø–∞—Ä—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é",
        one_time_keyboard=False
    )
    
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–í –≤–∏–¥–µ –ø–∞—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä BTC/USDT): ", reply_markup=keyboard)


@router.message(Reg.crypto)
async def analyze_crypto(message: Message, state: FSMContext):
    crypto_pair = message.text
    if '/' not in crypto_pair:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT).")
        return

    await state.update_data(crypto=crypto_pair)
    await state.set_state(Reg.interval)
    kb = [
        [types.KeyboardButton(text="1m"), types.KeyboardButton(text="5m"), types.KeyboardButton(text="15m")],
        [types.KeyboardButton(text="30m"), types.KeyboardButton(text="1h"), types.KeyboardButton(text="4h")],
        [types.KeyboardButton(text="1d"), types.KeyboardButton(text="1w"), types.KeyboardButton(text="1M")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª",
        one_time_keyboard=False
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª: ", reply_markup=keyboard)

@router.message(Reg.interval)
async def analyze_interval(message: Message, state: FSMContext):
    interval = message.text
    if interval not in valid_intervals:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.")
        return

    await state.update_data(interval=interval)
    await state.set_state(Reg.visualization)
    kb = [
        [types.KeyboardButton(text="–î–∞"), types.KeyboardButton(text="–ù–µ—Ç")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–∞?",
        one_time_keyboard=False
    )

    await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–∞?", reply_markup=keyboard)



@router.message(Reg.visualization)
async def analyze_visualization(message: Message, state: FSMContext):
    visualize = message.text.lower()
    if visualize not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        return

    data = await state.get_data()
    await state.clear()

    wait_message = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... ‚è≥", reply_markup=types.ReplyKeyboardRemove())
    await message.bot.send_chat_action(message.chat.id, 'typing')
    pro_analyze, support_level, resistance_level = generate_analysis_report(data['crypto'], data['interval'])

    kb = [
        [
            types.KeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"),
            types.KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
            types.KeyboardButton(text="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
        one_time_keyboard=False
    )

    if visualize == "–¥–∞":
        ohlcv_data = fetch_cryptocurrency_data(data['crypto'], data['interval'])
        chart_path = generate_chart(data['crypto'], data['interval'], ohlcv_data, support_level, resistance_level)
    
    
    await message.bot.delete_message(chat_id=message.chat.id, message_id=wait_message.message_id)
    
    await message.answer(f"{pro_analyze}", reply_markup=keyboard)
    if visualize == "–¥–∞":
        await message.answer_photo(photo=types.FSInputFile(chart_path), caption="–í–æ—Ç —Ç–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞.")
        os.remove(chart_path)
        